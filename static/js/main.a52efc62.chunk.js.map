{"version":3,"sources":["PlayerCard.js","App.js","serviceWorker.js","index.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","scissors","rock","paper","PlayerCard","props","a","createElement","className","src","eval","sign","alt","Game","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","playGame","setState","playerOne","signs","Math","floor","random","playerTwo","decideWinner","state","react_default","Button","variant","size","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iIAAA,IAAAA,mCAAAC,oBAAA,GAAAC,2CAAAD,oBAAAE,EAAAH,oCAKMI,SAAW,kCACXC,KAAO,kCACPC,MAAQ,kCAERC,WAAa,SAAbA,WAAcC,OACpB,OACIN,2CAAAO,EAAAC,cAAA,OAAKC,UAAU,eACfT,2CAAAO,EAAAC,cAAA,OAAME,IAAKC,KAAKL,MAAMM,MAAOC,IAAI,UAKtBR,iOCwCAS,cApDb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAQFI,SAAW,WACTP,EAAKQ,SAAS,CACZC,UAAWT,EAAKU,MAAMC,KAAKC,MAAsB,EAAhBD,KAAKE,WACtCC,UAAWd,EAAKU,MAAMC,KAAKC,MAAsB,EAAhBD,KAAKE,cAZ5Bb,EAgBde,aAAe,WACb,IAAMN,EAAYT,EAAKgB,MAAMP,UACvBK,EAAYd,EAAKgB,MAAMF,UAC7B,OAAIL,IAAcK,EACT,OAEQ,SAAdL,GAAsC,aAAdK,GACV,aAAdL,GAA0C,UAAdK,GACd,UAAdL,GAAuC,SAAdK,EAEnB,mBAEA,oBA1BTd,EAAKU,MAAQ,CAAC,OAAQ,WAAY,SAClCV,EAAKgB,MAAQ,CACXP,UAAW,OACXK,UAAW,YALDd,wEAiCZ,OACAiB,EAAAzB,EAAAC,cAAA,OAAKC,UAAU,SACfuB,EAAAzB,EAAAC,cAAA,WACAwB,EAAAzB,EAAAC,cAACH,EAAA,EAAD,CAAYO,KAAMM,KAAKa,MAAMP,YAC7BQ,EAAAzB,EAAAC,cAACH,EAAA,EAAD,CAAYO,KAAMM,KAAKa,MAAMF,aAE7BG,EAAAzB,EAAAC,cAAA,OAAKC,UAAU,UACZS,KAAKY,gBAEPE,EAAAzB,EAAAC,cAACyB,EAAA,EAAD,CAAQC,QAAQ,UACTC,KAAK,KACLC,QAAWlB,KAAKI,UAFvB,yBA3Cce,aCQCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOZ,EAAAzB,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a52efc62.chunk.js","sourcesContent":["/* eslint no-eval: 0 */\r\n/*eslint-disable no-unused-vars*/\r\nimport React from 'react';\r\n\r\n\r\nconst scissors = \"https://i.imgur.com/pgjyhIZ.png\";\r\nconst rock = \"https://i.imgur.com/LghSkIw.png\";\r\nconst paper = \"https://i.imgur.com/2gsdqvR.png\";\r\n\r\nconst PlayerCard = (props) => {\r\nreturn(\r\n    <div className=\"player-card\">\r\n    <img  src={eval(props.sign)} alt=\"img\"/>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default PlayerCard;\r\n","import React, { Component } from 'react';\r\nimport PlayerCard from './PlayerCard.js'\r\nimport { Button } from 'react-bootstrap';\r\n\r\nclass Game extends Component {\r\n  constructor (){\r\n    super();\r\n    this.signs = [\"rock\", \"scissors\", \"paper\"]\r\n    this.state = {\r\n      playerOne: \"rock\",\r\n      playerTwo: \"scissors\"\r\n    }\r\n  };\r\n\r\n  playGame = () => {\r\n    this.setState({\r\n      playerOne: this.signs[Math.floor(Math.random() * 3)],\r\n      playerTwo: this.signs[Math.floor(Math.random() * 3)]\r\n    })\r\n  };\r\n\r\n  decideWinner = () => {\r\n    const playerOne = this.state.playerOne;\r\n    const playerTwo = this.state.playerTwo;\r\n    if (playerOne === playerTwo) {\r\n      return \"Tie!\";\r\n    } else if (\r\n      (playerOne === \"rock\" && playerTwo === \"scissors\") ||\r\n      (playerOne === \"scissors\" && playerTwo === \"paper\") ||\r\n      (playerOne === \"paper\" && playerTwo === \"rock\")\r\n    ) {\r\n      return \"Player One Wins!\";\r\n    } else {\r\n      return \"Player Two Wins!\";\r\n    }\r\n  };\r\n\r\n  render(){\r\n    return (\r\n    <div className=\"style\">\r\n    <div>\r\n    <PlayerCard sign={this.state.playerOne}/>\r\n    <PlayerCard sign={this.state.playerTwo}/>\r\n    </div>\r\n    <div className=\"winner\">\r\n      {this.decideWinner()}\r\n    </div>\r\n     <Button variant=\"primary\"\r\n            size=\"lg\"\r\n            onClick = {this.playGame}>\r\n            Play the Game\r\n      </Button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}